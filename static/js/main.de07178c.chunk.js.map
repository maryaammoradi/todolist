{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","components/TodoEntry.js","components/TodoItem.js","components/TodoItems.js","components/TodoFooter.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","Object","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","todos","remove","observable","action","lastID","push","filter","todo","reduce","sum","length","activeTodoCount","computed","_this","TodoEntry","state","value","handleKeyDown","event","keyCode","preventDefault","todoStore","addTodo","setState","_this2","react_default","a","createElement","className","onChange","target","onKeyDown","placeholder","Component","TodoItem","observer","onToggle","props","toggle","destroyTodo","destroy","type","checked","onClick","TodoItems","todosFiltered","map","components_TodoItem","TodoFooter","completedCount","renderFilterLink","clearCompleted","filterName","url","caption","href","updateFilter","concat","App","components_TodoEntry","components_TodoItems","components_TodoFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de07178c.chunk.js","sourcesContent":["import {observable, action } from 'mobx'\r\n\r\n\r\nexport default class TodoModel {\r\n    store\r\n    id\r\n    @observable title\r\n    @observable completed\r\n    constructor(store, title, completed, id) {\r\n        this.title = title\r\n        this.completed = completed\r\n        this.id = id\r\n        this.store = store\r\n    }\r\n\r\n\r\n\r\n    @action\r\n    toggle(){\r\n        this.completed = !this.completed\r\n    }\r\n\r\n    @action\r\n    destroy() {\r\n        this.store.todos.remove(this);\r\n    }\r\n}","import {observable, action, computed} from 'mobx'\r\nimport TodoModel from \"./TodoModel\";\r\n\r\nclass TodoStore {\r\n    @observable todos = []\r\n    lastID = 0\r\n    @observable filter=\"all\"\r\n\r\n\r\n    @action\r\n    addTodo(title){\r\n        this.todos.push(new TodoModel(this, title, false, this.lastID ++))\r\n     }\r\n\r\n    @computed get activeTodoCount() {\r\n        return this.todos.reduce(\r\n            (sum, todo) => sum + (todo.completed ? 0 : 1),\r\n            0\r\n        )\r\n    }\r\n\r\n    @computed get completedCount() {\r\n        return this.todos.length - this.activeTodoCount;\r\n    }\r\n\r\n\r\n    @action\r\n    updateFilter = filter =>{\r\n        return this.filter = filter\r\n    }\r\n\r\n\r\n    @computed get todosFiltered(){\r\n        switch (this.filter){\r\n            case 'active':\r\n                return this.todos.filter(todo => !todo.completed);\r\n            case 'completed':\r\n                return this.todos.filter(todo => todo.completed);\r\n            default:\r\n                return this.todos;\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    @action\r\n    clearCompleted(){\r\n        this.todos= this.todos.filter(\r\n            todo=> !todo.completed\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nconst store = new TodoStore()\r\n export default store","import React, {Component} from 'react'\r\nimport todoStore from '../stores/TodoStore'\r\n\r\nclass TodoEntry extends Component{\r\n    state = {\r\n        value:\"\"\r\n    };\r\n    handleKeyDown = event => {\r\n        if (event.keyCode !== 13){\r\n            return\r\n        }\r\n        else {\r\n            event.preventDefault()\r\n            todoStore.addTodo(this.state.value)\r\n            this.setState({value:''})\r\n        }\r\n    };\r\n    render(){\r\n        return(\r\n                <header className=\"header\">\r\n                    <h1>todos</h1>\r\n                    <input\r\n                        value={this.state.value}\r\n                        onChange={event => this.setState({value:event.target.value})}\r\n                        onKeyDown={\r\n                               event => this.handleKeyDown(event)\r\n                        }\r\n                        className=\"new-todo\" placeholder=\"What needs to be done?\" />\r\n                </header>\r\n        );\r\n    }\r\n    \r\n}\r\n export default TodoEntry","import React, {Component} from 'react'\r\nimport {observer} from \"mobx-react\";\r\nimport TodoStore from \"../stores/TodoStore\";\r\nimport TodoModel from \"../stores/TodoModel\";\r\n\r\n@observer\r\nclass TodoItem extends Component{\r\n    onToggle = () =>{\r\n        this.props.todo.toggle()\r\n    }\r\n    destroyTodo=() =>{\r\n        this.props.todo.destroy()\r\n    }\r\n\r\n\r\n    render(){\r\n        const { todo } = this.props\r\n        return(\r\n            <div>\r\n                <li className={todo.completed ? \"completed\" : \" \"}>\r\n                    <div className=\"view\">\r\n                        <input className=\"toggle\" type=\"checkbox\" value=\"on\"  checked={todo.completed}\r\n                               onChange={this.onToggle} />\r\n                        <label>{todo.title}</label>\r\n                        <button className=\"destroy\" onClick={this.destroyTodo} />\r\n                    </div>\r\n                </li>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n export default TodoItem","import React, {Component} from 'react'\r\nimport TodoItem from \"./TodoItem\";\r\nimport todoStore from '../stores/TodoStore'\r\nimport {observer} from \"mobx-react\";\r\n\r\n@observer\r\nclass TodoItems extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <section className=\"main\">\r\n                    <ul className=\"todo-list\">\r\n                        {todoStore.todosFiltered.map(todo =>\r\n                            (<TodoItem\r\n                                todo={todo}\r\n                            />)\r\n                        )}\r\n\r\n                    </ul>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n    \r\n}\r\n export default TodoItems\r\n// TodoStore.todos.map(todo=>{\r\n//     console.log(todo)\r\n//     return(\r\n//         <TodoItem key={todo.id} todo={todo} />\r\n//     )\r\n// })\r\n","import React, {Component} from 'react';\r\nimport todoStore from '../stores/TodoStore';\r\nimport {observer} from \"mobx-react\";\r\nimport {action} from \"mobx\";\r\n\r\n@observer\r\nclass TodoFooter extends Component{\r\n\r\n    render() {\r\n\r\n        if (!todoStore.activeTodoCount && !todoStore.completedCount)\r\n            return null;\r\n\r\n\r\n        return(\r\n            <footer className=\"footer\">\r\n                <div className=\"todo-count\">{todoStore.activeTodoCount} item left</div>\r\n                <ul className=\"filters\">\r\n                    {this.renderFilterLink('all', \"\", \"All\")}\r\n                    {this.renderFilterLink('active', \"active\", \"Active\")}\r\n                    {this.renderFilterLink('completed', \"completed\", \"Completed\")}\r\n\r\n                </ul>\r\n\r\n                {todoStore.completedCount === 0\r\n                    ? null\r\n                    :\r\n                    <div className=\"clear-completed\" onClick={this.clearCompleted}>clear completed</div>\r\n                }\r\n            </footer>\r\n        )\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    renderFilterLink(filterName, url, caption) {\r\n        return (<li>\r\n            <a href={\"#/\" + url} onClick={()=>todoStore.updateFilter(filterName)}\r\n               className={`${todoStore.filter===filterName ?\"selected\":\"\"}`}>\r\n                {caption}\r\n            </a>\r\n            {' '}\r\n        </li>)\r\n    }\r\n\r\n\r\n    @action\r\n    clearCompleted = () => {\r\n        todoStore.clearCompleted();\r\n    };\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport default TodoFooter","import React, {Component} from 'react';\nimport {observer} from \"mobx-react\";\nimport './App.css';\nimport TodoEntry from \"./components/TodoEntry\";\nimport TodoItems from \"./components/TodoItems\";\nimport TodoFooter from \"./components/TodoFooter\";\n\n\n@observer\nclass App extends Component {\n    render() {\n        return (\n            <div id=\"todoapp\" className=\"todoapp\">\n                <TodoEntry />\n                <TodoItems />\n                <TodoFooter />\n            </div>\n        )\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}